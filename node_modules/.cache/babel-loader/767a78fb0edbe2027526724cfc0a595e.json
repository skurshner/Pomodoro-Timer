{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/StatusBar.js\";\nimport React from \"react\";\n\nconst StatusBar = ({\n  session,\n  timerState\n}) => {\n  const focDuration = timerState.focusDuration * 60;\n  const breakDuration = timerState.breakDuration * 60;\n\n  const getPercentComplete = label => {\n    if (label = \"Focusing\") {\n      return 100 * (focDuration - session.timeRemaining) / focDuration;\n    } else {\n      return (breakDuration - session.timeRemaining) / breakDuration;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, getPercentComplete(session.label)), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, timerState.focusDuration * 60), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, session.timeRemaining), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": getPercentComplete(session.label) // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: getPercentComplete(session.label) + \"%\"\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default StatusBar;","map":{"version":3,"sources":["/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/StatusBar.js"],"names":["React","StatusBar","session","timerState","focDuration","focusDuration","breakDuration","getPercentComplete","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA6B;AAC7C,QAAMC,WAAW,GAAGD,UAAU,CAACE,aAAX,GAA2B,EAA/C;AACA,QAAMC,aAAa,GAAGH,UAAU,CAACG,aAAX,GAA2B,EAAjD;;AAEA,QAAMC,kBAAkB,GAAGC,KAAK,IAAI;AAClC,QAAKA,KAAK,GAAG,UAAb,EAA0B;AACxB,aAAQ,OAAOJ,WAAW,GAAGF,OAAO,CAACO,aAA7B,CAAD,GAAgDL,WAAvD;AACD,KAFD,MAEO;AACL,aAAO,CAACE,aAAa,GAAGJ,OAAO,CAACO,aAAzB,IAA0CH,aAAjD;AACD;AACF,GAND;;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,kBAAkB,CAACL,OAAO,CAACM,KAAT,CAAtB,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIL,UAAU,CAACE,aAAX,GAA2B,EAA/B,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIH,OAAO,CAACO,aAAZ,CAHF,eAIE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAeH,kBAAkB,CAACL,OAAO,CAACM,KAAT,CALnC,CAKoD;AALpD;AAME,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAEJ,kBAAkB,CAACL,OAAO,CAACM,KAAT,CAAlB,GAAoC;AAA7C,KANT,CAM6D;AAN7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJF,CADF,CADF;AAmBD,CA/BD;;AAiCA,eAAeP,SAAf","sourcesContent":["import React from \"react\";\n\nconst StatusBar = ({ session, timerState }) => {\n  const focDuration = timerState.focusDuration * 60;\n  const breakDuration = timerState.breakDuration * 60;\n\n  const getPercentComplete = label => {\n    if ((label = \"Focusing\")) {\n      return (100 * (focDuration - session.timeRemaining)) / focDuration;\n    } else {\n      return (breakDuration - session.timeRemaining) / breakDuration;\n    }\n  };\n\n  return (\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        <p>{getPercentComplete(session.label)}</p>\n        <p>{timerState.focusDuration * 60}</p>\n        <p>{session.timeRemaining}</p>\n        <div className=\"progress\" style={{ height: \"20px\" }}>\n          <div\n            className=\"progress-bar\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            aria-valuenow={getPercentComplete(session.label)} // TODO: Increase aria-valuenow as elapsed time increases\n            style={{ width: getPercentComplete(session.label) + \"%\" }} // TODO: Increase width % as elapsed time increases\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StatusBar;\n"]},"metadata":{},"sourceType":"module"}