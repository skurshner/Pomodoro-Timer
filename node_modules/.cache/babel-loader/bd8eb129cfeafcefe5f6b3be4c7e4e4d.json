{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerStatus from \"./TimerStatus\";\nimport TimerControls from \"./TimerControls\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const initialState = {\n    focusDuration: 25,\n    breakDuration: 5\n  };\n  const limits = {\n    focusUpperLimit: 60,\n    focusLowerLimit: 5,\n    breakUpperLimit: 15,\n    breakLowerLimit: 1\n  };\n  const [timerState, setTimerState] = useState({ ...initialState\n  });\n\n  const increaseDuration = (duration, upperLimit) => Math.min(duration + 1, upperLimit);\n\n  const decreaseDuration = (duration, lowerLimit) => Math.max(lowerLimit, duration - 1);\n\n  const increaseFocusDuration = () => {\n    setTimerState({ ...timerState,\n      focusDuration: increaseDuration(timerState.focusDuration, limits.focusUpperLimit)\n    });\n  };\n\n  const decreaseFocusDuration = () => {\n    setTimerState({ ...timerState,\n      focusDuration: decreaseDuration(timerState.focusDuration, limits.focusLowerLimit)\n    });\n  };\n\n  const increaseBreakDuration = () => {\n    setTimerState({ ...timerState,\n      breakDuration: increaseDuration(timerState.breakDuration, limits.breakUpperLimit)\n    });\n  };\n\n  const decreaseBreakDuration = () => {\n    setTimerState({ ...timerState,\n      breakDuration: decreaseDuration(timerState.breakDuration, limits.breakLowerLimit)\n    });\n  };\n\n  const resetTimers = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n    setTimerState({ ...initialState\n    });\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(timerState.focusDuration, timerState.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: timerState.focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimerControls, {\n    session: session,\n    timerState: timerState,\n    isTimerRunning: isTimerRunning,\n    decreaseFocusDuration: decreaseFocusDuration,\n    increaseFocusDuration: increaseFocusDuration,\n    decreaseBreakDuration: decreaseBreakDuration,\n    increaseBreakDuration: increaseBreakDuration,\n    playPause: playPause,\n    resetTimers: resetTimers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerStatus, {\n    timerState: timerState,\n    session: session,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimerStatus","TimerControls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","initialState","limits","focusUpperLimit","focusLowerLimit","breakUpperLimit","breakLowerLimit","timerState","setTimerState","increaseDuration","duration","upperLimit","min","decreaseDuration","lowerLimit","increaseFocusDuration","decreaseFocusDuration","increaseBreakDuration","decreaseBreakDuration","resetTimers","Audio","play","playPause","nextState","prevStateSession"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,QAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,SAAS,CAACC,aAAV,GAA0B,CAAtC,CAAtB;AACA,SAAO,EACL,GAAGD,SADE;AAELC,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,aAArB,EAAoCC,aAApC,EAAmD;AACjD;AACF;AACA;AACE,SAAOC,cAAc,IAAI;AACvB,QAAIA,cAAc,CAACC,KAAf,KAAyB,UAA7B,EAAyC;AACvC,aAAO;AACLA,QAAAA,KAAK,EAAE,UADF;AAELP,QAAAA,aAAa,EAAEK,aAAa,GAAG;AAF1B,OAAP;AAID;;AACD,WAAO;AACLE,MAAAA,KAAK,EAAE,UADF;AAELP,MAAAA,aAAa,EAAEI,aAAa,GAAG;AAF1B,KAAP;AAID,GAXD;AAYD;;AAED,SAASI,QAAT,GAAoB;AAClB;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,KAAD,CAApD,CAFkB,CAGlB;;AACA,QAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,IAAD,CAAtC,CAJkB,CAMlB;;AACA,QAAMmB,YAAY,GAAG;AACnBT,IAAAA,aAAa,EAAE,EADI;AAEnBC,IAAAA,aAAa,EAAE;AAFI,GAArB;AAKA,QAAMS,MAAM,GAAG;AACbC,IAAAA,eAAe,EAAE,EADJ;AAEbC,IAAAA,eAAe,EAAE,CAFJ;AAGbC,IAAAA,eAAe,EAAE,EAHJ;AAIbC,IAAAA,eAAe,EAAE;AAJJ,GAAf;AAOA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8B1B,QAAQ,CAAC,EAAE,GAAGmB;AAAL,GAAD,CAA5C;;AAEA,QAAMQ,gBAAgB,GAAG,CAACC,QAAD,EAAWC,UAAX,KACvBtB,IAAI,CAACuB,GAAL,CAASF,QAAQ,GAAG,CAApB,EAAuBC,UAAvB,CADF;;AAGA,QAAME,gBAAgB,GAAG,CAACH,QAAD,EAAWI,UAAX,KACvBzB,IAAI,CAACC,GAAL,CAASwB,UAAT,EAAqBJ,QAAQ,GAAG,CAAhC,CADF;;AAGA,QAAMK,qBAAqB,GAAG,MAAM;AAClCP,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZf,MAAAA,aAAa,EAAEiB,gBAAgB,CAC7BF,UAAU,CAACf,aADkB,EAE7BU,MAAM,CAACC,eAFsB;AAFnB,KAAD,CAAb;AAOD,GARD;;AAUA,QAAMa,qBAAqB,GAAG,MAAM;AAClCR,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZf,MAAAA,aAAa,EAAEqB,gBAAgB,CAC7BN,UAAU,CAACf,aADkB,EAE7BU,MAAM,CAACE,eAFsB;AAFnB,KAAD,CAAb;AAOD,GARD;;AAUA,QAAMa,qBAAqB,GAAG,MAAM;AAClCT,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZd,MAAAA,aAAa,EAAEgB,gBAAgB,CAC7BF,UAAU,CAACd,aADkB,EAE7BS,MAAM,CAACG,eAFsB;AAFnB,KAAD,CAAb;AAOD,GARD;;AAUA,QAAMa,qBAAqB,GAAG,MAAM;AAClCV,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZd,MAAAA,aAAa,EAAEoB,gBAAgB,CAC7BN,UAAU,CAACd,aADkB,EAE7BS,MAAM,CAACI,eAFsB;AAFnB,KAAD,CAAb;AAOD,GARD;;AAUA,QAAMa,WAAW,GAAG,MAAM;AACxBrB,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAQ,IAAAA,aAAa,CAAC,EAAE,GAAGP;AAAL,KAAD,CAAb;AACD,GAJD;AAKA;AACF;AACA;AACA;AACA;;;AACElB,EAAAA,WAAW,CACT,MAAM;AACJ,QAAIgB,OAAO,CAACX,aAAR,KAA0B,CAA9B,EAAiC;AAC/B,UAAIgC,KAAJ,CAAU,8CAAV,EAA0DC,IAA1D;AACA,aAAOrB,UAAU,CACfT,WAAW,CAACgB,UAAU,CAACf,aAAZ,EAA2Be,UAAU,CAACd,aAAtC,CADI,CAAjB;AAGD;;AACD,WAAOO,UAAU,CAACd,QAAD,CAAjB;AACD,GATQ,EAUTW,cAAc,GAAG,IAAH,GAAU,IAVf,CAAX;AAaA;AACF;AACA;;AACE,WAASyB,SAAT,GAAqB;AACnBxB,IAAAA,iBAAiB,CAACX,SAAS,IAAI;AAC7B,YAAMoC,SAAS,GAAG,CAACpC,SAAnB;;AACA,UAAIoC,SAAJ,EAAe;AACbvB,QAAAA,UAAU,CAACwB,gBAAgB,IAAI;AAC7B;AACA;AACA,cAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,mBAAO;AACL7B,cAAAA,KAAK,EAAE,UADF;AAELP,cAAAA,aAAa,EAAEmB,UAAU,CAACf,aAAX,GAA2B;AAFrC,aAAP;AAID;;AACD,iBAAOgC,gBAAP;AACD,SAVS,CAAV;AAWD;;AACD,aAAOD,SAAP;AACD,KAhBgB,CAAjB;AAiBD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAExB,OADX;AAEE,IAAA,UAAU,EAAEQ,UAFd;AAGE,IAAA,cAAc,EAAEV,cAHlB;AAIE,IAAA,qBAAqB,EAAEmB,qBAJzB;AAKE,IAAA,qBAAqB,EAAED,qBALzB;AAME,IAAA,qBAAqB,EAAEG,qBANzB;AAOE,IAAA,qBAAqB,EAAED,qBAPzB;AAQE,IAAA,SAAS,EAAEK,SARb;AASE,IAAA,WAAW,EAAEH,WATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE,oBAAC,WAAD;AACE,IAAA,UAAU,EAAEZ,UADd;AAEE,IAAA,OAAO,EAAER,OAFX;AAGE,IAAA,cAAc,EAAEF,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAoBD;;AAED,eAAeD,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerStatus from \"./TimerStatus\";\nimport TimerControls from \"./TimerControls\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const initialState = {\n    focusDuration: 25,\n    breakDuration: 5,\n  };\n\n  const limits = {\n    focusUpperLimit: 60,\n    focusLowerLimit: 5,\n    breakUpperLimit: 15,\n    breakLowerLimit: 1,\n  };\n\n  const [timerState, setTimerState] = useState({ ...initialState });\n\n  const increaseDuration = (duration, upperLimit) =>\n    Math.min(duration + 1, upperLimit);\n\n  const decreaseDuration = (duration, lowerLimit) =>\n    Math.max(lowerLimit, duration - 1);\n\n  const increaseFocusDuration = () => {\n    setTimerState({\n      ...timerState,\n      focusDuration: increaseDuration(\n        timerState.focusDuration,\n        limits.focusUpperLimit\n      ),\n    });\n  };\n\n  const decreaseFocusDuration = () => {\n    setTimerState({\n      ...timerState,\n      focusDuration: decreaseDuration(\n        timerState.focusDuration,\n        limits.focusLowerLimit\n      ),\n    });\n  };\n\n  const increaseBreakDuration = () => {\n    setTimerState({\n      ...timerState,\n      breakDuration: increaseDuration(\n        timerState.breakDuration,\n        limits.breakUpperLimit\n      ),\n    });\n  };\n\n  const decreaseBreakDuration = () => {\n    setTimerState({\n      ...timerState,\n      breakDuration: decreaseDuration(\n        timerState.breakDuration,\n        limits.breakLowerLimit\n      ),\n    });\n  };\n\n  const resetTimers = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n    setTimerState({ ...initialState });\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(\n          nextSession(timerState.focusDuration, timerState.breakDuration)\n        );\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: timerState.focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <TimerControls\n        session={session}\n        timerState={timerState}\n        isTimerRunning={isTimerRunning}\n        decreaseFocusDuration={decreaseFocusDuration}\n        increaseFocusDuration={increaseFocusDuration}\n        decreaseBreakDuration={decreaseBreakDuration}\n        increaseBreakDuration={increaseBreakDuration}\n        playPause={playPause}\n        resetTimers={resetTimers}\n      />\n      <TimerStatus\n        timerState={timerState}\n        session={session}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}