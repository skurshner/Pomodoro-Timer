{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerStatus.js\";\nimport React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport StatusBar from \"./StatusBar\";\n\nconst TimerStatus = ({\n  timerState,\n  session,\n  isTimerRunning\n}) => {\n  const focusDur = minutesToDuration(timerState.focusDuration);\n  const breakDur = minutesToDuration(timerState.breakDuration);\n  const sessionType = session === null || session === void 0 ? void 0 : session.label;\n\n  const getPercentComplete = () => focusDur / session.timeRemaining;\n\n  if (!session) return /*#__PURE__*/React.createElement(React.Fragment, null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 11\n    }\n  }, session === null || session === void 0 ? void 0 : session.label, \" for\", \" \", sessionType === \"Focusing\" ? focusDur : breakDur, \" minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, secondsToDuration(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, session && !isTimerRunning ? \"PAUSED\" : \"\"))), /*#__PURE__*/React.createElement(StatusBar, {\n    getPercentComplete: getPercentComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TimerStatus;","map":{"version":3,"sources":["/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerStatus.js"],"names":["React","secondsToDuration","minutesToDuration","StatusBar","TimerStatus","timerState","session","isTimerRunning","focusDur","focusDuration","breakDur","breakDuration","sessionType","label","getPercentComplete","timeRemaining"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,OAAd;AAAuBC,EAAAA;AAAvB,CAAD,KAA6C;AAC/D,QAAMC,QAAQ,GAAGN,iBAAiB,CAACG,UAAU,CAACI,aAAZ,CAAlC;AACA,QAAMC,QAAQ,GAAGR,iBAAiB,CAACG,UAAU,CAACM,aAAZ,CAAlC;AACA,QAAMC,WAAW,GAAGN,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEO,KAA7B;;AACA,QAAMC,kBAAkB,GAAG,MAAMN,QAAQ,GAAGF,OAAO,CAACS,aAApD;;AACA,MAAI,CAACT,OAAL,EAAc,oBAAO,yCAAP;AAEd,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OADH,aACGA,OADH,uBACGA,OAAO,CAAEO,KADZ,UACuB,GADvB,EAEGD,WAAW,KAAK,UAAhB,GAA6BJ,QAA7B,GAAwCE,QAF3C,aAFF,eAOE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,iBAAiB,CAACK,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAES,aAAV,CADpB,eAPF,CADF,CAFF,eAeE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKT,OAAO,IAAI,CAACC,cAAZ,GAA6B,QAA7B,GAAwC,EAA7C,CADF,CADF,CAfF,eAoBE,oBAAC,SAAD;AAAW,IAAA,kBAAkB,EAAEO,kBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF;AAwBD,CA/BD;;AAiCA,eAAeV,WAAf","sourcesContent":["import React from \"react\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport StatusBar from \"./StatusBar\";\n\nconst TimerStatus = ({ timerState, session, isTimerRunning }) => {\n  const focusDur = minutesToDuration(timerState.focusDuration);\n  const breakDur = minutesToDuration(timerState.breakDuration);\n  const sessionType = session?.label;\n  const getPercentComplete = () => focusDur / session.timeRemaining;\n  if (!session) return <></>;\n\n  return (\n    <div>\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n          <h2 data-testid=\"session-title\">\n            {session?.label} for{\" \"}\n            {sessionType === \"Focusing\" ? focusDur : breakDur} minutes\n          </h2>\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(session?.timeRemaining)} remaining\n          </p>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <h2>{session && !isTimerRunning ? \"PAUSED\" : \"\"}</h2>\n        </div>\n      </div>\n      <StatusBar getPercentComplete={getPercentComplete} />\n    </div>\n  );\n};\n\nexport default TimerStatus;\n"]},"metadata":{},"sourceType":"module"}