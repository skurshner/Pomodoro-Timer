{"ast":null,"code":"var _jsxFileName = \"/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerStatus from \"./TimerStatus\";\nimport TimerControls from \"./TimerControls\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const initialState = {\n    focusDuration: 25,\n    breakDuration: 5\n  };\n  const limitsAndInterval = {\n    focusUpperLimit: 60,\n    focusLowerLimit: 5,\n    focusInterval: 5,\n    breakUpperLimit: 15,\n    breakLowerLimit: 1,\n    breakInterval: 1\n  };\n  const [timerState, setTimerState] = useState({ ...initialState\n  });\n\n  const increaseDuration = (duration, interval, upperLimit) => Math.min(duration + interval, upperLimit);\n\n  const decreaseDuration = (duration, interval, lowerLimit) => Math.max(lowerLimit, duration - interval);\n\n  const increaseFocusDuration = () => {\n    setTimerState({ ...timerState,\n      focusDuration: increaseDuration(timerState.focusDuration, limitsAndInterval.focusInterval, limitsAndInterval.focusUpperLimit)\n    });\n  };\n\n  const decreaseFocusDuration = () => {\n    setTimerState({ ...timerState,\n      focusDuration: decreaseDuration(timerState.focusDuration, limitsAndInterval.focusInterval, limitsAndInterval.focusLowerLimit)\n    });\n  };\n\n  const increaseBreakDuration = () => {\n    setTimerState({ ...timerState,\n      breakDuration: increaseDuration(timerState.breakDuration, limitsAndInterval.breakInterval, limitsAndInterval.breakUpperLimit)\n    });\n  };\n\n  const decreaseBreakDuration = () => {\n    setTimerState({ ...timerState,\n      breakDuration: decreaseDuration(timerState.breakDuration, limitsAndInterval.breakInterval, limitsAndInterval.breakLowerLimit)\n    });\n  };\n\n  const resetTimers = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n    setTimerState({ ...initialState\n    });\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(timerState.focusDuration, timerState.breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: timerState.focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimerControls, {\n    session: session,\n    timerState: timerState,\n    isTimerRunning: isTimerRunning,\n    decreaseFocusDuration: decreaseFocusDuration,\n    increaseFocusDuration: increaseFocusDuration,\n    decreaseBreakDuration: decreaseBreakDuration,\n    increaseBreakDuration: increaseBreakDuration,\n    playPause: playPause,\n    resetTimers: resetTimers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimerStatus, {\n    timerState: timerState,\n    session: session,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/stephenkurshner/code/thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimerStatus","TimerControls","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","initialState","limitsAndInterval","focusUpperLimit","focusLowerLimit","focusInterval","breakUpperLimit","breakLowerLimit","breakInterval","timerState","setTimerState","increaseDuration","duration","interval","upperLimit","min","decreaseDuration","lowerLimit","increaseFocusDuration","decreaseFocusDuration","increaseBreakDuration","decreaseBreakDuration","resetTimers","Audio","play","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerStatus from \"./TimerStatus\";\nimport TimerControls from \"./TimerControls\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const initialState = {\n    focusDuration: 25,\n    breakDuration: 5,\n  };\n\n  const limitsAndInterval = {\n    focusUpperLimit: 60,\n    focusLowerLimit: 5,\n    focusInterval: 5,\n    breakUpperLimit: 15,\n    breakLowerLimit: 1,\n    breakInterval: 1,\n  };\n\n  const [timerState, setTimerState] = useState({ ...initialState });\n\n  const increaseDuration = (duration, interval, upperLimit) =>\n    Math.min(duration + interval, upperLimit);\n\n  const decreaseDuration = (duration, interval, lowerLimit) =>\n    Math.max(lowerLimit, duration - interval);\n\n  const increaseFocusDuration = () => {\n    setTimerState({\n      ...timerState,\n      focusDuration: increaseDuration(\n        timerState.focusDuration,\n        limitsAndInterval.focusInterval,\n        limitsAndInterval.focusUpperLimit\n      ),\n    });\n  };\n\n  const decreaseFocusDuration = () => {\n    setTimerState({\n      ...timerState,\n      focusDuration: decreaseDuration(\n        timerState.focusDuration,\n        limitsAndInterval.focusInterval,\n        limitsAndInterval.focusLowerLimit\n      ),\n    });\n  };\n\n  const increaseBreakDuration = () => {\n    setTimerState({\n      ...timerState,\n      breakDuration: increaseDuration(\n        timerState.breakDuration,\n        limitsAndInterval.breakInterval,\n        limitsAndInterval.breakUpperLimit\n      ),\n    });\n  };\n\n  const decreaseBreakDuration = () => {\n    setTimerState({\n      ...timerState,\n      breakDuration: decreaseDuration(\n        timerState.breakDuration,\n        limitsAndInterval.breakInterval,\n        limitsAndInterval.breakLowerLimit\n      ),\n    });\n  };\n\n  const resetTimers = () => {\n    setIsTimerRunning(false);\n    setSession(null);\n    setTimerState({ ...initialState });\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(\n          nextSession(timerState.focusDuration, timerState.breakDuration)\n        );\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: timerState.focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <TimerControls\n        session={session}\n        timerState={timerState}\n        isTimerRunning={isTimerRunning}\n        decreaseFocusDuration={decreaseFocusDuration}\n        increaseFocusDuration={increaseFocusDuration}\n        decreaseBreakDuration={decreaseBreakDuration}\n        increaseBreakDuration={increaseBreakDuration}\n        playPause={playPause}\n        resetTimers={resetTimers}\n      />\n      <TimerStatus\n        timerState={timerState}\n        session={session}\n        isTimerRunning={isTimerRunning}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}